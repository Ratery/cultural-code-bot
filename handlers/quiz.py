import json
import random
from typing import List, Dict, Any
from inspect import cleandoc as clean_msg

from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.filters.text import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from keyboards import main_menu_keyboard

router = Router()
questions_file_path = 'resources/quiz_questions.json'


class Quiz(StatesGroup):
    quiz_in_progress = State()


async def send_question(message: types.Message, questions_order: List[int], number: int) -> types.Message:
    with open(questions_file_path) as f:
        question = json.load(f)[questions_order[number]]
    options = question['options']
    options_order = random.sample(tuple(range(len(options))), len(options))
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚ùå –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç")]],
        resize_keyboard=True
    )
    return await message.answer_poll(
        type="quiz",
        question=f"[{number + 1}/{len(questions_order)}] {question['question']}",
        options=[options[i] for i in options_order],
        correct_option_id=options_order.index(question['correct_option'] - 1),
        explanation=question.get('explanation'),
        is_anonymous=False,
        reply_markup=keyboard
    )


async def send_results(
    message: types.Message,
    title: str,
    correct_answers: int,
    questions_passed: int,
) -> types.Message:
    if questions_passed < 5:
        comment = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è."
    else:
        percentage = correct_answers / questions_passed
        if percentage <= 0.2:
            comment = clean_msg(
                """
                –¢–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –µ—â—ë –º–Ω–æ–≥–æ–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–∞–≤–∏–ª–∞—Ö —ç—Ç–∏–∫–µ—Ç–∞.
                –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à <a href="https://t.me/cultural_code_lyceum">–∫–∞–Ω–∞–ª</a> –∏ –æ—Ç–∫—Ä–æ–µ—à—å –¥–ª—è —Å–µ–±—è –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ.
                """
            )
        elif percentage <= 0.5:
            comment = clean_msg(
                """
                –¢—ã –∑–Ω–∞–µ—à—å –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —ç—Ç–∏–∫–µ—Ç–∞, –º–æ–ª–æ–¥–µ—Ü. –ù–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –∑–Ω–∞—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ.
                –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à <a href="https://t.me/cultural_code_lyceum">–∫–∞–Ω–∞–ª</a>, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. 
                """
            )
        elif percentage <= 0.8:
            comment = clean_msg(
                """
                –¢—ã, –≤–µ—Ä–æ—è—Ç–Ω–æ, –∑–Ω–∞–µ—à—å —É–∂–µ –º–Ω–æ–≥–æ–µ –æ –∫—É–ª—å—Ç—É—Ä–µ –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö —ç—Ç–∏–∫–µ—Ç–∞, –Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–≥–¥–∞ –ø–æ–ª–µ–∑–Ω–æ.
                –í –Ω–∞—à–µ–º <a href="https://t.me/cultural_code_lyceum">–∫–∞–Ω–∞–ª–µ</a> —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ.
                """
            )
        else:
            comment = clean_msg(
                """
                –¢—ã –∑–Ω–∞–µ—à—å –≤—Å—ë –æ–± —ç—Ç–∏–∫–µ—Ç–µ. –î–æ—Å—Ç–æ–π–Ω–æ —É–≤–∞–∂–µ–Ω–∏—è. –ù–æ –Ω–µ—Ç –ø—Ä–µ–¥–µ–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É.
                –í –Ω–∞—à–µ–º <a href="https://t.me/cultural_code_lyceum">–∫–∞–Ω–∞–ª–µ</a> –º—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ.
                """
            )
    main_text = clean_msg(
        f"""
        üìô <b>{title}</b>
        <b>–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {correct_answers}/{questions_passed}
        """
    )
    return await message.answer(
        text=f"{main_text}\n{comment}",
        reply_markup=main_menu_keyboard
    )


@router.message(Command("quiz", "test"), State())
@router.message(Text("üìô –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"), State())
async def cmd_quiz(message: types.Message, state: FSMContext) -> None:
    with open(questions_file_path) as f:
        questions_count = len(json.load(f))
    await state.set_state(Quiz.quiz_in_progress)
    questions_order = random.sample(tuple(range(questions_count)), questions_count)
    poll = await send_question(
        message=message,
        questions_order=questions_order,
        number=0
    )
    await state.update_data(
        poll_message=poll,
        question_number=0,
        questions_order=questions_order,
        correct_answers=0
    )


@router.message(Command("cancel"), Quiz.quiz_in_progress)
@router.message(Text("‚ùå –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç"), Quiz.quiz_in_progress)
async def cmd_cancel(message: types.Message, state: FSMContext) -> None:
    state_data = await state.get_data()
    correct_answers: int = state_data['correct_answers']
    questions_passed = state_data['question_number'] + 1
    await state.clear()
    await send_results(
        message=message,
        title="–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω",
        correct_answers=correct_answers,
        questions_passed=questions_passed
    )


@router.poll_answer(Quiz.quiz_in_progress)
async def handle_poll_answer(answer: types.PollAnswer, state: FSMContext) -> None:
    state_data: Dict[str, Any] = await state.get_data()
    message: types.Message = state_data['poll_message']
    if answer.poll_id != message.poll.id:
        return
    correct_answers: int = state_data['correct_answers']
    question_number: int = state_data['question_number'] + 1
    questions_count = len(state_data['questions_order'])
    if answer.option_ids[0] == message.poll.correct_option_id:
        correct_answers += 1
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
    else:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!")
    if question_number == questions_count:
        await state.clear()
        await send_results(
            message=message,
            title="–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω",
            correct_answers=correct_answers,
            questions_passed=questions_count
        )
    else:
        poll = await send_question(
            message=message,
            questions_order=state_data['questions_order'],
            number=question_number
        )
        await state.update_data(
            poll_message=poll,
            question_number=question_number,
            correct_answers=correct_answers
        )
